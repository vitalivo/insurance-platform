from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from .models import Application
from .serializers import ApplicationCreateSerializer, ApplicationSerializer
from .utils import send_application_notification, send_telegram_notification
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.generics import ListAPIView, RetrieveUpdateAPIView

from django.core.cache import cache

# –í ApplicationCreateView –¥–æ–±–∞–≤–∏–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
def get_default_status(self):
    # –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å "–ù–æ–≤–∞—è" –Ω–∞ 1 —á–∞—Å
    cache_key = 'default_status'
    default_status = cache.get(cache_key)
    
    if not default_status:
        from .models import ApplicationStatus
        default_status = ApplicationStatus.objects.get(name='–ù–æ–≤–∞—è')
        cache.set(cache_key, default_status, 60 * 60)
    
    return default_status

class AdminApplicationListView(ListAPIView):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    queryset = Application.objects.all().order_by('-created_at')
    serializer_class = ApplicationSerializer
    permission_classes = [IsAuthenticated, IsAdminUser]  # ‚úÖ JWT –∑–∞—â–∏—â–µ–Ω–æ
    
    def get_queryset(self):
        queryset = super().get_queryset()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        status = self.request.query_params.get('status')
        if status:
            queryset = queryset.filter(status__name=status)
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        product = self.request.query_params.get('product')
        if product:
            queryset = queryset.filter(product__id=product)
            
        return queryset

class AdminApplicationUpdateView(RetrieveUpdateAPIView):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    queryset = Application.objects.all()
    serializer_class = ApplicationSerializer
    permission_classes = [IsAuthenticated, IsAdminUser]  # ‚úÖ JWT –∑–∞—â–∏—â–µ–Ω–æ

class ApplicationCreateView(generics.CreateAPIView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
    queryset = Application.objects.all()
    serializer_class = ApplicationCreateSerializer
    permission_classes = [AllowAny]  # ‚úÖ –û—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å –∏ User Agent
        validated_data = serializer.validated_data
        validated_data['user_ip'] = self.get_client_ip(request)
        validated_data['user_agent'] = request.META.get('HTTP_USER_AGENT', '')
        
        application = serializer.save(**validated_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.perform_create_notifications(application)
        
        response_serializer = ApplicationSerializer(application)
        return Response(response_serializer.data, status=status.HTTP_201_CREATED)
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
    
    def perform_create_notifications(self, application):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        
        # üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            send_application_notification(application)
            print(f"‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ #{application.application_number}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        
        # üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            send_telegram_notification(application)
            print(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application.application_number}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
        
        return application

class ApplicationDetailView(generics.RetrieveAPIView):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
    queryset = Application.objects.all()
    serializer_class = ApplicationSerializer
    permission_classes = [AllowAny]  # ‚úÖ –û—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    lookup_field = 'application_number'