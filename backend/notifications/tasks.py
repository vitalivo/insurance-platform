from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
import ssl
import logging

logger = logging.getLogger(__name__)

@shared_task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})
def send_email_notification(self, subject, message, recipient_email):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Celery —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
    """
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        import smtplib
        from django.core.mail.backends.smtp import EmailBackend
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π backend —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL
        class CustomEmailBackend(EmailBackend):
            def open(self):
                if self.connection:
                    return False
                try:
                    self.connection = smtplib.SMTP(self.host, self.port, timeout=self.timeout)
                    if self.use_tls:
                        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                        import ssl
                        context = ssl.create_default_context()
                        context.check_hostname = False
                        context.verify_mode = ssl.CERT_NONE
                        self.connection.starttls(context=context)
                    if self.username and self.password:
                        self.connection.login(self.username, self.password)
                    return True
                except Exception as e:
                    logger.error(f"Email connection error: {e}")
                    if not self.fail_silently:
                        raise
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π backend
        backend = CustomEmailBackend(
            host=settings.EMAIL_HOST,
            port=settings.EMAIL_PORT,
            username=settings.EMAIL_HOST_USER,
            password=settings.EMAIL_HOST_PASSWORD,
            use_tls=settings.EMAIL_USE_TLS,
            use_ssl=settings.EMAIL_USE_SSL,
            fail_silently=False,
        )
        
        from django.core.mail import EmailMessage
        email = EmailMessage(
            subject=subject,
            body=message,
            from_email=settings.EMAIL_HOST_USER,
            to=[recipient_email],
            connection=backend
        )
        
        result = email.send()
        
        if result:
            logger.info(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email}")
            return f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email}"
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –Ω–∞ {recipient_email}")
            raise Exception("Email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        raise

@shared_task(bind=True, max_retries=3)
def send_telegram_notification(self, message, chat_id=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        bot_token = settings.TELEGRAM_BOT_TOKEN
        target_chat_id = chat_id or settings.TELEGRAM_CHAT_ID
        
        if not bot_token or not target_chat_id:
            raise ValueError("Telegram bot token –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        import requests
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': target_chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=10)
        response.raise_for_status()
        
        logger.info(f"‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {target_chat_id}")
        return f"Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id}"
        
    except Exception as exc:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {exc}")
        raise self.retry(exc=exc, countdown=60)

@shared_task
def send_application_notification(application_data):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{application_data['id']}"
        email_message = f"""
        –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:
        
        –ü—Ä–æ–¥—É–∫—Ç: {application_data['product_name']}
        –ö–ª–∏–µ–Ω—Ç: {application_data['client_name']}
        Email: {application_data['client_email']}
        –¢–µ–ª–µ—Ñ–æ–Ω: {application_data['client_phone']}
        –î–∞—Ç–∞: {application_data['created_at']}
        """
        
        telegram_message = f"""
        üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{application_data['id']}</b>
        üìã –ü—Ä–æ–¥—É–∫—Ç: {application_data['product_name']}
        üë§ –ö–ª–∏–µ–Ω—Ç: {application_data['client_name']}
        ÔøΩÔøΩ Email: {application_data['client_email']}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {application_data['client_phone']}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        send_email_notification.delay(
            subject=subject,
            message=email_message,
            recipient_email=settings.ADMIN_EMAIL
        )
        
        send_telegram_notification.delay(
            message=telegram_message
        )
        
        return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å"
        
    except Exception as exc:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {exc}")
        raise
